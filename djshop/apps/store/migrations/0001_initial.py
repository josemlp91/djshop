# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-12-04 19:23
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name of the offer')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description of the offer')),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Discount amount')),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('absolute', 'Absolute')], max_length=32, verbose_name='Discount type (percent or absolute)')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name of the product')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description of the product')),
                ('price', models.DecimalField(decimal_places=2, help_text='Default price of this product', max_digits=10, verbose_name='Price of this product')),
                ('price_type', models.CharField(choices=[('price_per_serving', 'Price per serving'), ('price_per_unit', 'Price per unit')], default='price_per_weight', max_length=32)),
                ('is_public', models.BooleanField(verbose_name='Is this product visible in the virtual shop?')),
            ],
        ),
        migrations.CreateModel(
            name='ProductBundle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name of the offer')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description of the offer')),
                ('paid_product_units', models.PositiveIntegerField(verbose_name='Number of units of the paid product')),
                ('free_product_units', models.PositiveIntegerField(verbose_name='Number of units of the free product')),
                ('free_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='free_products', to='store.Product', verbose_name='Free product')),
                ('paid_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paid_products', to='store.Product', verbose_name='Paid product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name of the product category')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description of the product category')),
            ],
        ),
        migrations.CreateModel(
            name='ServingSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveIntegerField(default='100', help_text='Weight amount for this price per weight in grams. By default it is 100 g.', verbose_name='Weight amount for this price per weight in grams')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='categories',
            field=models.ManyToManyField(related_name='products', to='store.ProductCategory', verbose_name='Products'),
        ),
        migrations.AddField(
            model_name='product',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_products', to=settings.AUTH_USER_MODEL, verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='product',
            name='serving_size',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.ServingSize'),
        ),
        migrations.AddField(
            model_name='groupoffer',
            name='product_categories',
            field=models.ManyToManyField(help_text='Product categories that are contained in this offer', to='store.ProductCategory', verbose_name='ProductCategory'),
        ),
        migrations.AddField(
            model_name='groupoffer',
            name='products',
            field=models.ManyToManyField(help_text='Products that are contained in this offer', to='store.Product', verbose_name='Products'),
        ),
    ]
